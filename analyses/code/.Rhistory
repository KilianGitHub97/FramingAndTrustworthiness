mutate(
Promise_NegFrame_Transfer =
round(
(Promise1_NegFrameTransfer +
Promise2_NegFrameTransfer) /
2,
0)) %>%
select(-contains("1_")) %>%
select(-contains("2_"))
data_long <- melt(
data = data[, 13:30],
measure.vars = grep("Frame", names(data)),
na.rm = TRUE
)
data_long <- melt(
data = data[, 13:30],
measure.vars = grep("Frame", colnames(data)),
na.rm = TRUE
)
data_long <- melt(
data = data[,13:30],
measure.vars = grep("Frame", colnames(data))
)
data_long <- melt(
data = data,
measure.vars = grep("Frame", colnames(data))
)
data_long <- melt(
data = data,
measure.vars = grep("Frame", colnames(data)),
na.rm = TRUE
)
#Boxplot for all Item variables
which(grep("Frame", names(data)))
View(data_long)
data = data_long,
mapping = aes(
x = variable
)) +
geom_boxplot()
allBox
data = data_long,
mapping = aes(
x = variable
)) +
geom_boxplot() +
theme_minimal
ggplot(
data = data_long,
mapping = aes(
x = variable
)
) +
geom_boxplot()
ggplot(
data = data_long,
mapping = aes(
x = variable,
y = value
)
) +
geom_boxplot()
ggplot(
data = data_long,
mapping = aes(
x = variable,
y = value
)
) +
geom_boxplot() +
theme_minimal()
ggplot(
data = data_long,
mapping = aes(
x = variable,
y = value
)
) +
geom_boxplot(color = "lightblue") +
theme_minimal()
ggplot(
data = data_long,
mapping = aes(
x = variable,
y = value
)
) +
geom_boxplot(fill = "lightblue") +
theme_minimal()
ggplot(
data = data_long,
mapping = aes(
x = variable,
y = value
)
) +
geom_boxplot(fill = "lightblue") +
theme(axis.text.x = element_text(angle = 90, size = 7)) +
theme_minimal()
ggplot(
data = data_long,
mapping = aes(
x = variable,
y = value
)
) +
geom_boxplot(fill = "lightblue") +
theme_minimal()
ggplot(
data = data_long,
mapping = aes(
x = variable,
y = value
)
) +
geom_boxplot(fill = "lightblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, size = 7)) +
# testing Hypothesis ------------------------------------------------------
# Hypothesis 1 ============================================================
#filtering all the rows of our gathered dataframe that include "Trust"
AddedValuesFull.long.Trust <- AddedValuesFull.long %>%
filter(grepl("Trust", AddedValuesFull.long$Condition)) %>%
na.omit()
ggplot(
data = data_long,
mapping = aes(
x = variable,
y = value
)
) +
geom_boxplot(fill = "lightblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, size = 7))
ggplot(
data = data_long[order()],
mapping = aes(
x = variable,
y = value
)
) +
geom_boxplot(fill = "lightblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, size = 7))
ggplot(
data = data_long[order(grep("Trust", variable), grep("Conf", variable), grep("Transfer", variable))],
mapping = aes(
x = variable,
y = value
)
) +
geom_boxplot(fill = "lightblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, size = 7))
ggplot(
data = data_long[order(grepl("Trust", variable), grepl("Conf", variable), grepl("Transfer", variable))],
mapping = aes(
x = variable,
y = value
)
) +
geom_boxplot(fill = "lightblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, size = 7))
data_long[order(grepl("Trust", variable), grepl("Conf", variable), grepl("Transfer", variable))]
data_long[order(grep("Trust", variable), grep("Conf", variable), grep("Transfer", variable))]
data_long <- data_long[
order(grep("Trust", variable),
grep("Conf", variable),
grep("Transfer", variable))]
ggplot(
data = data_long,
mapping = aes(
x = variable,
y = value
)
) +
geom_boxplot(fill = "lightblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, size = 7))
#Preparation: Long format
data_long <- melt(
data = data,
measure.vars = grep("Frame", colnames(data)),
na.rm = TRUE
)
data_long <- data_long[
order(grep("^Trust", variable),
grep("^Conf", variable),
grep("^Transfer", variable))]
#Preparation: Long format
data_long <- melt(
data = data,
measure.vars = grep("Frame", colnames(data)),
na.rm = TRUE
)
ggplot(
data = data_long,
mapping = aes(
x = variable,
y = value
)
) +
geom_boxplot(fill = "lightblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, size = 7))
data_long$variable <- factor(data_long$variable)
data_long <- data_long[
order(grep("Trust", variable),
grep("Conf", variable),
grep("Transfer", variable))]
#Preparation: Long format
data_long <- melt(
data = data,
measure.vars = grep("Frame", colnames(data)),
na.rm = TRUE
)
data_long <- data_long[
order(grep("Trust", data_long$variable),
grep("Conf", data_long$variable),
grep("Transfer", data_long$variable))]
#Preparation: Long format
data_long <- melt(
data = data,
measure.vars = grep("Frame", colnames(data)),
na.rm = TRUE
)
data_long <- data_long[
sort(grep("Trust", data_long$variable),
grep("Conf", data_long$variable),
grep("Transfer", data_long$variable))]
data_long <- data_long[
sort(grep("Trust", data_long$variable),
grep("Conf", data_long$variable),
grep("Transfer", data_long$variable))]
ggplot(
data = sort(data_long),
mapping = aes(
x = variable,
y = value
)
) +
geom_boxplot(fill = "lightblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, size = 7))
ggplot(
data = sort(data_long$variable),
mapping = aes(
x = variable,
y = value
)
) +
geom_boxplot(fill = "lightblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, size = 7))
#Preparation: Long format
data_long <- melt(
data = data,
measure.vars = grep("Frame", colnames(data)),
na.rm = TRUE
)
ggplot(
data = sort(data_long$variable),
mapping = aes(
x = variable,
y = value
)
) +
geom_boxplot(fill = "lightblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, size = 7))
?sort
#Preparation: Long format
data_long <- melt(
data = data,
measure.vars = grep("Frame", colnames(data)),
na.rm = TRUE
)
data_long$variable <- sort(
data_long$variable,
partial = c("Trust", "Conf", "Transfer"))
data_long$variable <- sort(
data_long$variable)
data_long$variable <- sort(
-data_long$variable)
ggplot(
data = sort(data_long$variable),
mapping = aes(
x = variable,
y = value
)
) +
geom_boxplot(fill = "lightblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, size = 7))
ggplot(
data = data_long$variable,
mapping = aes(
x = variable,
y = value
)
) +
geom_boxplot(fill = "lightblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, size = 7))
ggplot(
data = data_long,
mapping = aes(
x = variable,
y = value
)
) +
geom_boxplot(fill = "lightblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, size = 7))
ggplot(
data = data_long[grep("Trust", variable)],
mapping = aes(
x = variable,
y = value
)
) +
geom_boxplot(fill = "lightblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, size = 7))
ggplot(
data = data_long[grep("Trust", variable)],
mapping = aes(
x = variable,
y = value
)
) +
geom_boxplot(fill = "lightblue") +
ylab(likert) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, size = 7))
ggplot(
data = data_long[grep("Trust", variable)],
mapping = aes(
x = variable,
y = value
)
) +
geom_boxplot(fill = "lightblue") +
ylab("likert") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, size = 7))
ggplot(
data = data_long[grep("Trust", variable)],
mapping = aes(
x = variable,
y = value
)
) +
geom_boxplot(fill = "lightblue") +
ylab("likert") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, size = 11))
ggplot(
data = data_long[grep("Trust", variable)],
mapping = aes(
x = variable,
y = value
)
) +
geom_boxplot(fill = "lightblue") +
ylab("likert") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, size = 10))
# Boxplot for Trust Items
BoxTrust <-
ggplot(
data = data_long[grep("Trust", variable)],
mapping = aes(
x = variable,
y = value
)
) +
geom_boxplot(fill = "lightblue") +
ylab("likert") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, size = 9))
ggplot(
data = data_long[grep("Trust", variable)],
mapping = aes(
x = variable,
y = value
)
) +
geom_boxplot(fill = "lightblue") +
ylab("likert") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, size = 9))
ggplot(
data = data_long[grep("Trust", variable)],
mapping = aes(
x = variable,
y = value
)
) +
geom_boxplot(fill = "lightblue") +
ylab("likert") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, size = 8))
# Boxplot for Trust Items
BoxTrust <- ggplot(
data = data_long[grep("Trust", variable)],
mapping = aes(
x = variable,
y = value
)
) +
geom_boxplot(fill = "lightblue") +
ylab("likert") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, size = 8)
)
BoxTrust
#Boxplot for Confidence Items
BoxConf <- ggplot(
data = data_long[grep("Conf", variable)],
mapping = aes(
x = variable,
y = value
)) +
geom_boxplot(fill = "lightblue") +
ylab("likert") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, size = 8)
)
BoxConf
#Boxplot for Transfer Items
BoxTransfer <- ggplot(
data = data_long[grep("Transfer", variable)],
mapping = aes(
x = variable,
y = value
)) +
geom_boxplot(fill = "lightblue") +
ylab("likert") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, size = 8)
)
BoxTransfer
#Boxplot with all Items
BoxAll <- ggplot(
data = data_long,
mapping = aes(
x = variable,
y = value
)) +
geom_boxplot(fill = "lightblue") +
ylab("likert") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, size = 8)
)
BoxAll
pkgs <- c(
"tidyverse",
"data.table",
"qgraph"
)
lapply(pkgs, library, character.only = TRUE)
#Preparation: Item correlation plots
data[grep("Frame", names(data))]
#Preparation: Item correlation plots
data[,grep("Frame", names(data))]
#Preparation: Item correlation plots
items <- data[,13:30]
data_qgraph <- cor(
items,
use = "pairwise.complete.obs",
method = "spearman")
#Graph: Item correlation plot
CorNetwork <- qgraph(
data_qgraph,
graph = "pcor",
layout = "spring")
data_qgraph
#Preparation: Item correlation plot
items <- na.omit(data[,13:30])
data_qgraph <- cor(
items,
use = "pairwise.complete.obs",
method = "spearman")
data_qgraph
data_qgraph
data_qgraph <- cor(
items,
use = "pairwise.complete.obs",
method = "spearman")
data_qgraph
#Preparation: Item correlation plot
items <- data[,13:30]
data_qgraph <- cor(
items,
use = "pairwise.complete.obs",
method = "spearman")
#Graph: Item correlation plot
CorNetwork <- qgraph(
na.omit(data_qgraph),
graph = "pcor",
layout = "spring")
data_qgraph <- cor(
items,
use = "pairwise.complete.obs",
method = "spearman",
na.rm = TRUE)
