row <- combinations[i,]
disc1 <- as.double(row["disc1"])
disc2 <- as.double(row["disc2"])
nblo1 <- as.double(row["nblo1"])
nblo2 <- as.double(row["nblo2"])
type1 <- as.double(row["type1"])
type2 <- as.double(row["type2"])
#make components for rtest
component_1 <- data.w[
discount == disc1 &
nblock == nblo1 &
type == type1]
component_2 <- data.w[
discount == disc2 &
nblock == nblo2 &
type == type2]
#spearman and pearson correlations
cor.c1.spearman <- cor(
component_1$par_tau,
component_1$true_par_tau,
method = "spearman")
cor.c2.spearman <- cor(
component_2$par_tau,
component_2$true_par_tau,
method = "spearman")
cor.c1.pearson <- cor(
component_1$par_tau,
component_1$true_par_tau,
method = "pearson")
cor.c2.pearson <- cor(
component_2$par_tau,
component_2$true_par_tau,
method = "pearson")
mse.c1 <- mean((
component_1$true_par_tau - component_1$par_tau)^2)
mse.c2 <- mean((
component_2$true_par_tau - component_2$par_tau)^2)
#correlation tests for spearman and pearson
rtest.spearman <- r.test(
n = nrow(component_1),
n2 = nrow(component_2),
r12 = cor.c1.spearman,
r34 = cor.c2.spearman)
rtest.pearson <- r.test(
n = nrow(component_1),
n2 = nrow(component_2),
r12 = cor.c1.pearson,
r34 = cor.c2.pearson)
wtest <-wilcox.test(mse.c1, mse.c2)
#list with all information of interest
results[[l]] <- data.table(
discount_1 = disc1,
discount_2 = disc2,
nblock_1 = nblo1,
nblock_2 = nblo2,
type_1 = type1,
type_2 = type2,
spearman_1 = cor.c1.spearman,
spearman_2 = cor.c2.spearman,
pearson_1 = cor.c1.pearson,
pearson_2 = cor.c2.pearson,
mse_1 = mse.c1,
mse_2 = mse.c2,
p.spearman = round(rtest.spearman$p, 4),
z.spearman = round(rtest.spearman$z, 4),
p.pearson = round(rtest.pearson$p, 4),
z.pearson = round(rtest.pearson$z, 4),
p.mse = round(wtest$p.value, 4),
w.mse = round(wtest$statistic, 4)
)
l = l + 1
}
#convert results into data.table
results <- rbindlist(results)
results
#dataframe with all possible combinations
combinations <- expand.grid(
disc1 = c(0, 8),
disc2 = c(0, 8),
nblo1 = c(30, 100),
nblo2 = c(30, 100),
type1 = 1:6,
type2 = 1:6)
#dataframe with all combinations of interest
combinations <- subset(
combinations,
disc1 != disc2 &
nblo1 == nblo2 &
type1 == type2 |
disc1 == disc2 &
nblo1 != nblo2 &
type1 == type2 |
disc1 == disc2 &
nblo1 == nblo2 &
type1 != type2,
drop = TRUE)
results <- list()
l = 1
for (i in 1:nrow(combinations)) {
#filter every row separatly and subset values
row <- combinations[i,]
disc1 <- as.double(row["disc1"])
disc2 <- as.double(row["disc2"])
nblo1 <- as.double(row["nblo1"])
nblo2 <- as.double(row["nblo2"])
type1 <- as.double(row["type1"])
type2 <- as.double(row["type2"])
#make components for rtest
component_1 <- data.w[
discount == disc1 &
nblock == nblo1 &
type == type1]
component_2 <- data.w[
discount == disc2 &
nblock == nblo2 &
type == type2]
#spearman and pearson correlations
cor.c1.spearman <- cor(
component_1$par_tau,
component_1$true_par_tau,
method = "spearman")
cor.c2.spearman <- cor(
component_2$par_tau,
component_2$true_par_tau,
method = "spearman")
cor.c1.pearson <- cor(
component_1$par_tau,
component_1$true_par_tau,
method = "pearson")
cor.c2.pearson <- cor(
component_2$par_tau,
component_2$true_par_tau,
method = "pearson")
#correlation tests for spearman and pearson
rtest.spearman <- r.test(
n = nrow(component_1),
n2 = nrow(component_2),
r12 = cor.c1.spearman,
r34 = cor.c2.spearman)
rtest.pearson <- r.test(
n = nrow(component_1),
n2 = nrow(component_2),
r12 = cor.c1.pearson,
r34 = cor.c2.pearson)
#list with all information of interest
results[[l]] <- data.table(
discount_1 = disc1,
discount_2 = disc2,
nblock_1 = nblo1,
nblock_2 = nblo2,
type_1 = type1,
type_2 = type2,
spearman_1 = cor.c1.spearman,
spearman_2 = cor.c2.spearman,
pearson_1 = cor.c1.pearson,
pearson_2 = cor.c2.pearson,
mse_1 = mse.c1,
mse_2 = mse.c2,
p.spearman = round(rtest.spearman$p, 4),
z.spearman = round(rtest.spearman$z, 4),
p.pearson = round(rtest.pearson$p, 4),
z.pearson = round(rtest.pearson$z, 4)
)
l = l + 1
}
#convert results into data.table
results <- rbindlist(results)
results
#dataframe with all possible combinations
combinations <- expand.grid(
disc1 = c(0, 8),
disc2 = c(0, 8),
nblo1 = c(30, 100),
nblo2 = c(30, 100),
type1 = 1:6,
type2 = 1:6)
#dataframe with all combinations of interest
combinations <- subset(
combinations,
disc1 != disc2 &
nblo1 == nblo2 &
type1 == type2 |
disc1 == disc2 &
nblo1 != nblo2 &
type1 == type2 |
disc1 == disc2 &
nblo1 == nblo2 &
type1 != type2,
drop = TRUE)
results <- list()
l = 1
for (i in 1:nrow(combinations)) {
#filter every row separatly and subset values
row <- combinations[i,]
disc1 <- as.double(row["disc1"])
disc2 <- as.double(row["disc2"])
nblo1 <- as.double(row["nblo1"])
nblo2 <- as.double(row["nblo2"])
type1 <- as.double(row["type1"])
type2 <- as.double(row["type2"])
#make components for rtest
component_1 <- data.w[
discount == disc1 &
nblock == nblo1 &
type == type1]
component_2 <- data.w[
discount == disc2 &
nblock == nblo2 &
type == type2]
#spearman and pearson correlations
cor.c1.spearman <- cor(
component_1$par_tau,
component_1$true_par_tau,
method = "spearman")
cor.c2.spearman <- cor(
component_2$par_tau,
component_2$true_par_tau,
method = "spearman")
cor.c1.pearson <- cor(
component_1$par_tau,
component_1$true_par_tau,
method = "pearson")
cor.c2.pearson <- cor(
component_2$par_tau,
component_2$true_par_tau,
method = "pearson")
#correlation tests for spearman and pearson
rtest.spearman <- r.test(
n = nrow(component_1),
n2 = nrow(component_2),
r12 = cor.c1.spearman,
r34 = cor.c2.spearman)
rtest.pearson <- r.test(
n = nrow(component_1),
n2 = nrow(component_2),
r12 = cor.c1.pearson,
r34 = cor.c2.pearson)
#list with all information of interest
results[[l]] <- data.table(
discount_1 = disc1,
discount_2 = disc2,
nblock_1 = nblo1,
nblock_2 = nblo2,
type_1 = type1,
type_2 = type2,
spearman_1 = cor.c1.spearman,
spearman_2 = cor.c2.spearman,
pearson_1 = cor.c1.pearson,
pearson_2 = cor.c2.pearson,
p.spearman = round(rtest.spearman$p, 4),
z.spearman = round(rtest.spearman$z, 4),
p.pearson = round(rtest.pearson$p, 4),
z.pearson = round(rtest.pearson$z, 4)
)
l = l + 1
}
#convert results into data.table
results <- rbindlist(results)
results
#setwd
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Libraries
source("Packages.R")
#Load data
data <- readRDS("..//..//data//processed//FramingAndTrust_clean.rds")
#Item combination
data <- data %>%
mutate(
PastGame_PosFrame_Trust =
round(
(PastGame1_PosFrameTrust +
PastGame2_PosFrameTrust) /
2,
0)) %>%
mutate(
PastGame_PosFrame_Conf =
round(
(PastGame1_PosFrameConf +
PastGame2_PosFrameConf) /
2,
0)) %>%
mutate(
PastGame_PosFrame_Transfer =
round(
(PastGame1_PosFrameTransfer +
PastGame2_PosFrameTransfer) /
2,
0)) %>%
mutate(
PersTrait_PosFrame_Trust =
round(
(PersTrait1_PosFrameTrust +
PersTrait2_PosFrameTrust) /
2,
0)) %>%
mutate(
PersTrait_PosFrame_Conf =
round(
(PersTrait1_PosFrameConf +
PersTrait2_PosFrameConf) /
2,
0)) %>%
mutate(
PersTrait_PosFrame_Transfer =
round(
(PersTrait1_PosFrameTransfer +
PersTrait2_PosFrameTransfer) /
2,
0)) %>%
mutate(
Promise_PosFrame_Trust =
round(
(Promise1_PosFrameTrust +
Promise2_PosFrameTrust) /
2,
0)) %>%
mutate(
Promise_PosFrame_Conf =
round(
(Promise1_PosFrameConf +
Promise2_PosFrameConf) /
2,
0)) %>%
mutate(
Promise_PosFrame_Transfer =
round(
(Promise1_PosFrameTransfer +
Promise2_PosFrameTransfer) /
2,
0)) %>%
mutate(
PastGame_NegFrame_Trust =
round(
(PastGame1_NegFrameTrust +
PastGame2_NegFrameTrust) /
2,
0)) %>%
mutate(
PastGame_NegFrame_Conf =
round(
(PastGame1_NegFrameConf +
PastGame2_NegFrameConf) /
2,
0)) %>%
mutate(
PastGame_NegFrame_Transfer =
round(
(PastGame1_NegFrameTransfer +
PastGame2_NegFrameTransfer) /
2,
0)) %>%
mutate(
PersTrait_NegFrame_Trust =
round(
(PersTrait1_NegFrameTrust +
PersTrait2_NegFrameTrust) /
2,
0)) %>%
mutate(
PersTrait_NegFrame_Conf =
round(
(PersTrait1_NegFrameConf +
PersTrait2_NegFrameConf) /
2,
0)) %>%
mutate(
PersTrait_NegFrame_Transfer =
round(
(PersTrait1_NegFrameTransfer +
PersTrait2_NegFrameTransfer) /
2,
0)) %>%
mutate(
Promise_NegFrame_Trust =
round(
(Promise1_NegFrameTrust +
Promise2_NegFrameTrust) /
2,
0)) %>%
mutate(
Promise_NegFrame_Conf =
round(
(Promise1_NegFrameConf +
Promise2_NegFrameConf) /
2,
0)) %>%
mutate(
Promise_NegFrame_Transfer =
round(
(Promise1_NegFrameTransfer +
Promise2_NegFrameTransfer) /
2,
0)) %>%
select(-contains("1_")) %>%
select(-contains("2_"))
cor(
data = data[,13:30],
method = "spearman",
na.rm = TRUE
)
cor(
data[,13:30],
method = "spearman",
na.rm = TRUE
)
cor(
data[,13:30],
method = "spearman"
)
cor(
data[grep("Pos", colnames(data))],
method = "spearman"
)
cor(
data[, grep("Pos", colnames(data))],
method = "spearman"
)
data[, grep("Pos", colnames(data))]
cor(
data[, 13:21],
method = "spearman"
)
cor(
data[, 13:21],
method = "spearman",
use = "complete.obs"
)
cor(
data[, 13:30],
method = "spearman",
use = "complete.obs"
)
?cor
cor(
data[, 13:30],
method = "spearman",
use = "complete.obs"
)
cor(
data[, 13:30],
method = "spearman",
use = "all.obs"
)
cor(
data[, 13:30],
method = "spearman",
use = "complete.obs"
)
cor(
data[, 13:21],
method = "spearman",
use = "complete.obs"
)
which(grep("Pos", colnames(data)))
data[, grep("Neg", colnames(data))]
CorMatPos <- cor(
data[, 13:21],
method = "spearman",
use = "complete.obs"
)
#correlation table: negative frame
data[, grep("Neg", colnames(data))]
CorMatNeg <- cor(
data[, 22:30],
method = "spearman",
use = "complete.obs"
)
View(CorMatNeg)
#correlation matrix: positive frame
data[, grep("Pos", colnames(data))]
#correlation matrix: positive frame
range(data[, grep("Pos", colnames(data))])
#correlation matrix: negative frame
range(data[, grep("Neg", colnames(data))])
qgraph(
CorMatPos,
graph = "pcor",
layout = "spring")
?qgraph
qgraph(
CorMatPos,
graph = "pcor",
layout = "spring",
label.prop = 11
)
qgraph(
CorMatPos,
graph = "pcor",
layout = "spring",
label.prop = 2
)
QgraphPos <- qgraph(
CorMatNeg,
graph = "pcor",
layout = "spring",
label.prop = 2
)
View(CorMatNeg)
View(CorMatPos)
QgraphNeg <- qgraph(
CorMatNeg,
graph = "pcor",
layout = "spring",
label.prop = 2
)
QgraphPos <- qgraph(
CorMatPos,
graph = "pcor",
layout = "spring",
label.prop = 2
)
