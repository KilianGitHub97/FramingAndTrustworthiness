nblo2 = c(30, 100),
type1 = 1:6,
type2 = 1:6)
#dataframe with all combinations of interest
combinations <- subset(
combinations,
disc1 != disc2 &
nblo1 == nblo2 &
type1 == type2 |
disc1 == disc2 &
nblo1 != nblo2 &
type1 == type2 |
disc1 == disc2 &
nblo1 == nblo2 &
type1 != type2,
drop = TRUE)
results <- list()
l = 1
for (i in 1:nrow(combinations)) {
#filter every row separatly and subset values
row <- combinations[i,]
disc1 <- as.double(row["disc1"])
disc2 <- as.double(row["disc2"])
nblo1 <- as.double(row["nblo1"])
nblo2 <- as.double(row["nblo2"])
type1 <- as.double(row["type1"])
type2 <- as.double(row["type2"])
#make components for rtest
component_1 <- data.w[
discount == disc1 &
nblock == nblo1 &
type == type1]
component_2 <- data.w[
discount == disc2 &
nblock == nblo2 &
type == type2]
#spearman and pearson correlations
cor.c1.spearman <- cor(
component_1$par_tau,
component_1$true_par_tau,
method = "spearman")
cor.c2.spearman <- cor(
component_2$par_tau,
component_2$true_par_tau,
method = "spearman")
cor.c1.pearson <- cor(
component_1$par_tau,
component_1$true_par_tau,
method = "pearson")
cor.c2.pearson <- cor(
component_2$par_tau,
component_2$true_par_tau,
method = "pearson")
mse.c1 <- mean((
component_1$true_par_tau - component_1$par_tau)^2)
mse.c2 <- mean((
component_2$true_par_tau - component_2$par_tau)^2)
#correlation tests for spearman and pearson
rtest.spearman <- r.test(
n = nrow(component_1),
n2 = nrow(component_2),
r12 = cor.c1.spearman,
r34 = cor.c2.spearman)
rtest.pearson <- r.test(
n = nrow(component_1),
n2 = nrow(component_2),
r12 = cor.c1.pearson,
r34 = cor.c2.pearson)
wtest <-wilcox.test(mse.c1, mse.c2)
#list with all information of interest
results[[l]] <- data.table(
discount_1 = disc1,
discount_2 = disc2,
nblock_1 = nblo1,
nblock_2 = nblo2,
type_1 = type1,
type_2 = type2,
spearman_1 = cor.c1.spearman,
spearman_2 = cor.c2.spearman,
pearson_1 = cor.c1.pearson,
pearson_2 = cor.c2.pearson,
mse_1 = mse.c1,
mse_2 = mse.c2,
p.spearman = round(rtest.spearman$p, 4),
z.spearman = round(rtest.spearman$z, 4),
p.pearson = round(rtest.pearson$p, 4),
z.pearson = round(rtest.pearson$z, 4),
p.mse = round(wtest$p.value, 4),
w.mse = round(wtest$statistic, 4)
)
l = l + 1
}
#convert results into data.table
results <- rbindlist(results)
results
#dataframe with all possible combinations
combinations <- expand.grid(
disc1 = c(0, 8),
disc2 = c(0, 8),
nblo1 = c(30, 100),
nblo2 = c(30, 100),
type1 = 1:6,
type2 = 1:6)
#dataframe with all combinations of interest
combinations <- subset(
combinations,
disc1 != disc2 &
nblo1 == nblo2 &
type1 == type2 |
disc1 == disc2 &
nblo1 != nblo2 &
type1 == type2 |
disc1 == disc2 &
nblo1 == nblo2 &
type1 != type2,
drop = TRUE)
results <- list()
l = 1
for (i in 1:nrow(combinations)) {
#filter every row separatly and subset values
row <- combinations[i,]
disc1 <- as.double(row["disc1"])
disc2 <- as.double(row["disc2"])
nblo1 <- as.double(row["nblo1"])
nblo2 <- as.double(row["nblo2"])
type1 <- as.double(row["type1"])
type2 <- as.double(row["type2"])
#make components for rtest
component_1 <- data.w[
discount == disc1 &
nblock == nblo1 &
type == type1]
component_2 <- data.w[
discount == disc2 &
nblock == nblo2 &
type == type2]
#spearman and pearson correlations
cor.c1.spearman <- cor(
component_1$par_tau,
component_1$true_par_tau,
method = "spearman")
cor.c2.spearman <- cor(
component_2$par_tau,
component_2$true_par_tau,
method = "spearman")
cor.c1.pearson <- cor(
component_1$par_tau,
component_1$true_par_tau,
method = "pearson")
cor.c2.pearson <- cor(
component_2$par_tau,
component_2$true_par_tau,
method = "pearson")
#correlation tests for spearman and pearson
rtest.spearman <- r.test(
n = nrow(component_1),
n2 = nrow(component_2),
r12 = cor.c1.spearman,
r34 = cor.c2.spearman)
rtest.pearson <- r.test(
n = nrow(component_1),
n2 = nrow(component_2),
r12 = cor.c1.pearson,
r34 = cor.c2.pearson)
#list with all information of interest
results[[l]] <- data.table(
discount_1 = disc1,
discount_2 = disc2,
nblock_1 = nblo1,
nblock_2 = nblo2,
type_1 = type1,
type_2 = type2,
spearman_1 = cor.c1.spearman,
spearman_2 = cor.c2.spearman,
pearson_1 = cor.c1.pearson,
pearson_2 = cor.c2.pearson,
mse_1 = mse.c1,
mse_2 = mse.c2,
p.spearman = round(rtest.spearman$p, 4),
z.spearman = round(rtest.spearman$z, 4),
p.pearson = round(rtest.pearson$p, 4),
z.pearson = round(rtest.pearson$z, 4)
)
l = l + 1
}
#convert results into data.table
results <- rbindlist(results)
results
#dataframe with all possible combinations
combinations <- expand.grid(
disc1 = c(0, 8),
disc2 = c(0, 8),
nblo1 = c(30, 100),
nblo2 = c(30, 100),
type1 = 1:6,
type2 = 1:6)
#dataframe with all combinations of interest
combinations <- subset(
combinations,
disc1 != disc2 &
nblo1 == nblo2 &
type1 == type2 |
disc1 == disc2 &
nblo1 != nblo2 &
type1 == type2 |
disc1 == disc2 &
nblo1 == nblo2 &
type1 != type2,
drop = TRUE)
results <- list()
l = 1
for (i in 1:nrow(combinations)) {
#filter every row separatly and subset values
row <- combinations[i,]
disc1 <- as.double(row["disc1"])
disc2 <- as.double(row["disc2"])
nblo1 <- as.double(row["nblo1"])
nblo2 <- as.double(row["nblo2"])
type1 <- as.double(row["type1"])
type2 <- as.double(row["type2"])
#make components for rtest
component_1 <- data.w[
discount == disc1 &
nblock == nblo1 &
type == type1]
component_2 <- data.w[
discount == disc2 &
nblock == nblo2 &
type == type2]
#spearman and pearson correlations
cor.c1.spearman <- cor(
component_1$par_tau,
component_1$true_par_tau,
method = "spearman")
cor.c2.spearman <- cor(
component_2$par_tau,
component_2$true_par_tau,
method = "spearman")
cor.c1.pearson <- cor(
component_1$par_tau,
component_1$true_par_tau,
method = "pearson")
cor.c2.pearson <- cor(
component_2$par_tau,
component_2$true_par_tau,
method = "pearson")
#correlation tests for spearman and pearson
rtest.spearman <- r.test(
n = nrow(component_1),
n2 = nrow(component_2),
r12 = cor.c1.spearman,
r34 = cor.c2.spearman)
rtest.pearson <- r.test(
n = nrow(component_1),
n2 = nrow(component_2),
r12 = cor.c1.pearson,
r34 = cor.c2.pearson)
#list with all information of interest
results[[l]] <- data.table(
discount_1 = disc1,
discount_2 = disc2,
nblock_1 = nblo1,
nblock_2 = nblo2,
type_1 = type1,
type_2 = type2,
spearman_1 = cor.c1.spearman,
spearman_2 = cor.c2.spearman,
pearson_1 = cor.c1.pearson,
pearson_2 = cor.c2.pearson,
p.spearman = round(rtest.spearman$p, 4),
z.spearman = round(rtest.spearman$z, 4),
p.pearson = round(rtest.pearson$p, 4),
z.pearson = round(rtest.pearson$z, 4)
)
l = l + 1
}
#convert results into data.table
results <- rbindlist(results)
results
Daten <- data.frame(
x = as.numeric(c("NA", "NA", "NA", 1, 6, 3)),
y = as.numeric(c(1, 2, 9, "NA", "NA", "NA")),
z = as.factor(c("a", "a", "a", "b", "b", "b")),
soll = as.numeric(c(1,2,9,1,6,3))
)
#Libraries
source("Packages.R")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Libraries
source("Packages.R")
Daten %>%
mutate(
soll =
x + y
)
Daten <- data.frame(
x = as.numeric(c("NA", "NA", "NA", 1, 6, 3)),
y = as.numeric(c(1, 2, 9, "NA", "NA", "NA")),
z = as.factor(c("a", "a", "a", "b", "b", "b")),
soll = as.numeric(c(1,2,9,1,6,3))
)
Daten
Daten %>%
mutate(
soll2 =
x + y
)
Daten$soll <- paste(X, Y, sep = "_")
Daten$soll <- paste(x, y, sep = "_")
Daten$soll2 <- paste(Daten$x, Daten$y, sep = "_")
Daten
strsplit(Daten[z == a]$soll2, 3)
Daten <- data.frame(
x = as.numeric(c("NA", "NA", "NA", 1, 6, 3)),
y = as.numeric(c(1, 2, 9, "NA", "NA", "NA")),
z = as.factor(c("a", "a", "a", "b", "b", "b")),
soll = as.numeric(c(1,2,9,1,6,3))
)
Daten$soll2 <- paste(Daten$x, Daten$y, sep = "_")
?strsplit(Daten[z == a]$soll2, 3)
strsplit(Daten[z == a]$soll2, "_")
Daten
Daten$soll3 <- strsplit(Daten[z == a]$soll2, "_")
Daten[z == a]
Daten$soll3 <- strsplit(Daten[x == 1]$soll2, "_")
Daten$soll3 <- strsplit(Daten$soll2, "_")
Daten
Daten$soll3
d <- data.frame(
x = as.numeric(c("NA", "NA", "NA", 1, 6, 3)),
y = as.numeric(c(1, 2, 9, "NA", "NA", "NA")),
z = as.factor(c("a", "a", "a", "b", "b", "b")),
soll = as.numeric(c(1,2,9,1,6,3))
)
d$soll2 <- rowSums(d[,c("x", "y")], na.rm = TRUE)
View(d)
d$soll3 <- apply(d[1:2], 1, function(x) sum(x, na.rm = TRUE))
View(d)
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Libraries
source("Packages.R")
#Load data
data <- readRDS("..//..//data//processed//FramingAndTrust_clean.rds")
#Item combination
data <- data %>%
mutate(
PastGame_PosFrame_Trust =
round(
(PastGame1_PosFrameTrust +
PastGame2_PosFrameTrust) /
2,
0)) %>%
mutate(
PastGame_PosFrame_Conf =
round(
(PastGame1_PosFrameConf +
PastGame2_PosFrameConf) /
2,
0)) %>%
mutate(
PastGame_PosFrame_Transfer =
round(
(PastGame1_PosFrameTransfer +
PastGame2_PosFrameTransfer) /
2,
0)) %>%
mutate(
PersTrait_PosFrame_Trust =
round(
(PersTrait1_PosFrameTrust +
PersTrait2_PosFrameTrust) /
2,
0)) %>%
mutate(
PersTrait_PosFrame_Conf =
round(
(PersTrait1_PosFrameConf +
PersTrait2_PosFrameConf) /
2,
0)) %>%
mutate(
PersTrait_PosFrame_Transfer =
round(
(PersTrait1_PosFrameTransfer +
PersTrait2_PosFrameTransfer) /
2,
0)) %>%
mutate(
Promise_PosFrame_Trust =
round(
(Promise1_PosFrameTrust +
Promise2_PosFrameTrust) /
2,
0)) %>%
mutate(
Promise_PosFrame_Conf =
round(
(Promise1_PosFrameConf +
Promise2_PosFrameConf) /
2,
0)) %>%
mutate(
Promise_PosFrame_Transfer =
round(
(Promise1_PosFrameTransfer +
Promise2_PosFrameTransfer) /
2,
0)) %>%
mutate(
PastGame_NegFrame_Trust =
round(
(PastGame1_NegFrameTrust +
PastGame2_NegFrameTrust) /
2,
0)) %>%
mutate(
PastGame_NegFrame_Conf =
round(
(PastGame1_NegFrameConf +
PastGame2_NegFrameConf) /
2,
0)) %>%
mutate(
PastGame_NegFrame_Transfer =
round(
(PastGame1_NegFrameTransfer +
PastGame2_NegFrameTransfer) /
2,
0)) %>%
mutate(
PersTrait_NegFrame_Trust =
round(
(PersTrait1_NegFrameTrust +
PersTrait2_NegFrameTrust) /
2,
0)) %>%
mutate(
PersTrait_NegFrame_Conf =
round(
(PersTrait1_NegFrameConf +
PersTrait2_NegFrameConf) /
2,
0)) %>%
mutate(
PersTrait_NegFrame_Transfer =
round(
(PersTrait1_NegFrameTransfer +
PersTrait2_NegFrameTransfer) /
2,
0)) %>%
mutate(
Promise_NegFrame_Trust =
round(
(Promise1_NegFrameTrust +
Promise2_NegFrameTrust) /
2,
0)) %>%
mutate(
Promise_NegFrame_Conf =
round(
(Promise1_NegFrameConf +
Promise2_NegFrameConf) /
2,
0)) %>%
mutate(
Promise_NegFrame_Transfer =
round(
(Promise1_NegFrameTransfer +
Promise2_NegFrameTransfer) /
2,
0)) %>%
select(-contains("1_")) %>%
select(-contains("2_"))
data$PastGame_Trust <- rowSums(
data[,c("PastGame_PosFrame_Trust",
"PastGame_NegFrame_Trust")],
na.rm = TRUE
)
View(data)
data$PersTrait_Trust <- rowSums(
data[,c("PersTrait_PosFrame_Trust",
"PersTrait_NegFrame_Trust")],
na.rm = TRUE
)
data$Promise_Trust <- rowSums(
data[,c("Promise_PosFrame_Trust",
"Promise_NegFrame_Trust")],
na.rm = TRUE
)
# Correlation Tests
CorPastGame <- cor.test(
data$PastGame_Trust,
data$UsefulPastBehav,
method = "spearman"
)
View(CorPastGame)
CorPersTrait <- cor.test(
data$PersTrait_Trust,
data$UsefulPersTrait,
method = "spearman"
)
CorPromise <- cor.test(
data$Promise_Trust,
data$UsefulPersMess,
method = "spearman"
)
CorPastGame
CorPersTrait
CorPromise
CorPastGame
CorPromise
