(Promise1_PosFrameTransfer +
Promise2_PosFrameTransfer) /
2,
0)) %>%
mutate(
PastGame_NegFrame_Trust =
round(
(PastGame1_NegFrameTrust +
PastGame2_NegFrameTrust) /
2,
0)) %>%
mutate(
PastGame_NegFrame_Conf =
round(
(PastGame1_NegFrameConf +
PastGame2_NegFrameConf) /
2,
0)) %>%
mutate(
PastGame_NegFrame_Transfer =
round(
(PastGame1_NegFrameTransfer +
PastGame2_NegFrameTransfer) /
2,
0)) %>%
mutate(
PersTrait_NegFrame_Trust =
round(
(PersTrait1_NegFrameTrust +
PersTrait2_NegFrameTrust) /
2,
0)) %>%
mutate(
PersTrait_NegFrame_Conf =
round(
(PersTrait1_NegFrameConf +
PersTrait2_NegFrameConf) /
2,
0)) %>%
mutate(
PersTrait_NegFrame_Transfer =
round(
(PersTrait1_NegFrameTransfer +
PersTrait2_NegFrameTransfer) /
2,
0)) %>%
mutate(
Promise_NegFrame_Trust =
round(
(Promise1_NegFrameTrust +
Promise2_NegFrameTrust) /
2,
0)) %>%
mutate(
Promise_NegFrame_Conf =
round(
(Promise1_NegFrameConf +
Promise2_NegFrameConf) /
2,
0)) %>%
mutate(
Promise_NegFrame_Transfer =
round(
(Promise1_NegFrameTransfer +
Promise2_NegFrameTransfer) /
2,
0)) %>%
select(-contains("1_")) %>%
select(-contains("2_"))
FramingTest <- list()
l = 1
for(i in 1:3){
for (j in 1:3) {
var_one <- paste0(
"data$",
infos[i],
conditions[1],
"_",
measures[j]
)
var_two <- paste0(
"data$",
infos[i],
conditions[2],
"_",
measures[j]
)
WilcoxTest <- wilcox.test(
na.omit(eval(parse(text = var_one))),
na.omit(eval(parse(text = var_two))),
paired = FALSE
)
FramingTest[[l]] <- data.table(
var1 = var_one,
var2 = var_two,
w.stat = round(WilcoxTest$statistic, 4),
p.value = round(WilcoxTest$p.value, 4)
)
l = l + 1
}
}
#Correlation Table
infos <- c("PastGame", "Promise", "PersTrait")
measures <- c("Trust", "Conf", "Transfer")
conditions <- c("_PosFrame", "_NegFrame")
FramingTest <- list()
l = 1
for(i in 1:3){
for (j in 1:3) {
var_one <- paste0(
"data$",
infos[i],
conditions[1],
"_",
measures[j]
)
var_two <- paste0(
"data$",
infos[i],
conditions[2],
"_",
measures[j]
)
WilcoxTest <- wilcox.test(
na.omit(eval(parse(text = var_one))),
na.omit(eval(parse(text = var_two))),
paired = FALSE
)
FramingTest[[l]] <- data.table(
var1 = var_one,
var2 = var_two,
w.stat = round(WilcoxTest$statistic, 4),
p.value = round(WilcoxTest$p.value, 4)
)
l = l + 1
}
}
FramingTest <- rbindlist(FramingTest)
FramingTest$p.adjust <- p.adjust(FramingTest$p.value)
View(FramingTest)
rbind(
summary(data)
)
?friedman.test()
View(data)
# 2. Perceived usefullness of the of different message types rank in the
# following order: PastBehav, PersTrait, PersMess.
data_friedman <- data %>%
transmute(
id,
UsefulPastBehav,
UsefulPersMess,
UsefulPersTrait
) %>%
melt(
measure.vars = grep("Useful", colnames(data)),
na.rm = TRUE
)
# 2. Perceived usefullness of the of different message types rank in the
# following order: PastBehav, PersTrait, PersMess.
data_friedman <- data %>%
transmute(
id,
UsefulPastBehav,
UsefulPersMess,
UsefulPersTrait
)
data_friedman <- melt(
data = data_friedman,
measure.vars = grep("Useful", colnames(data)),
na.rm = TRUE
)
data_friedman <- melt(
data = data_friedman,
measure.vars = grep("Useful", colnames(data_friedman)),
na.rm = TRUE
)
# 2. Perceived usefullness of the of different message types rank in the
# following order: PastBehav, PersTrait, PersMess.
data_friedman <- data %>%
transmute(
id,
UsefulPastBehav,
UsefulPersMess,
UsefulPersTrait
) %>%
melt(
data = data_friedman,
measure.vars = grep("Useful", colnames(data_friedman)),
na.rm = TRUE
)
# 2. Perceived usefullness of the of different message types rank in the
# following order: PastBehav, PersTrait, PersMess.
data_friedman <- data %>%
transmute(
id,
UsefulPastBehav,
UsefulPersMess,
UsefulPersTrait
) %>%
melt(
measure.vars = grep("Useful", colnames(data_friedman)),
na.rm = TRUE
)
View(data_friedman)
# 2. Perceived usefullness of the of different message types rank in the
# following order: PastBehav, PersTrait, PersMess.
data_friedman <- data %>%
transmute(
id,
UsefulPastBehav,
UsefulPersMess,
UsefulPersTrait
) %>%
melt(
measure.vars = grep("Useful", colnames(data_friedman)),
na.rm = TRUE
)
View(data_friedman)
# 2. Perceived usefullness of the of different message types rank in the
# following order: PastBehav, PersTrait, PersMess.
data_friedman1 <- data %>%
transmute(
id,
UsefulPastBehav,
UsefulPersMess,
UsefulPersTrait
) %>%
melt(
measure.vars = grep("Useful", colnames(data_friedman)),
na.rm = TRUE
)
# 2. Perceived usefullness of the of different message types rank in the
# following order: PastBehav, PersTrait, PersMess.
data_friedman <- data %>%
transmute(
id,
UsefulPastBehav,
UsefulPersMess,
UsefulPersTrait
)
data_friedman <- melt(
data = data_friedman,
measure.vars = grep("Useful", colnames(data_friedman)),
na.rm = TRUE
)
#friedman test
UsefulFriedman <- friedman.test(
y = data_friedman$value,
groups = data_friedman$variable
blocks = data_friedman$id
)
#friedman test
UsefulFriedman <- friedman.test(
y = data_friedman$value,
groups = data_friedman$variable,
blocks = data_friedman$id
)
UsefulFriedman
PosthocFriedman <- rstatix::wilcox_test(
data = data_friedman,
formula = value ~ variable,
p.adjust.method = "bonferroni",
paired = TRUE
)
PosthocFriedman
#shaping data
data_friedman <- data %>%
transmute(
id,
UsefulPastBehav,
UsefulPersMess,
UsefulPersTrait
)
data_friedman
#shaping data
data_friedman <- data %>%
transmute(
id,
Condition,
UsefulPastBehav,
UsefulPersMess,
UsefulPersTrait
)
data_friedman
#shaping data
data_friedman_wide <- data %>%
transmute(
id,
Condition,
UsefulPastBehav,
UsefulPersMess,
UsefulPersTrait
)
data_friedman_long <- melt(
data = data_friedman_wide,
measure.vars = grep("Useful", colnames(data_friedman_wide)),
na.rm = TRUE
)
summary(
data_friedman_wide$UsefulPastBehav,
data_friedman_wide$UsefulPersTrait,
data_friedman_wide$UsefulPersMess,
)
#descriptive stats
rbind(
summary(
data_friedman_wide[Condition == "Positive Frame"]$UsefulPastBehav
)
)
#descriptive stats
rbind(
summary(
data_friedman_wide[Condition == "Positive Frame"]$UsefulPastBehav,
na.rm = TRUE
)
)
summary(
data_friedman_wide[Condition == "Positive Frame"]$UsefulPastBehav,
na.rm = TRUE
)
#shaping data
data_friedman_wide <- data %>%
transmute(
id,
Condition,
UsefulPastBehav,
UsefulPersMess,
UsefulPersTrait
)
View(data_friedman)
summary(
data_friedman_wide[Condition == "PositiveFrame"]$UsefulPastBehav,
na.rm = TRUE
)
#descriptive stats
rbind(
PosFrame_PastBehav = summary(
data_friedman_wide[Condition == "PositiveFrame"]$UsefulPastBehav
),
PosFrame_PersTrait = summary(
data_friedman_wide[Condition == "PositiveFrame"]$UsefulPersTrait
),
PosFrame_PersMess = summary(
data_friedman_wide[Condition == "PositiveFrame"]$UsefulPersMess
),
NegFrame_PastBehav = summary(
data_friedman_wide[Condition == "NegativeFrame"]$UsefulPastBehav
),
NegFrame_PersTrait = summary(
data_friedman_wide[Condition == "NegativeFrame"]$UsefulPersTrait
),
NegFrame_PersMess = summary(
data_friedman_wide[Condition == "NegativeFrame"]$UsefulPersMess
)
)
#descriptive stats
x <- rbind(
PosFrame_PastBehav = summary(
data_friedman_wide[Condition == "PositiveFrame"]$UsefulPastBehav
),
PosFrame_PersTrait = summary(
data_friedman_wide[Condition == "PositiveFrame"]$UsefulPersTrait
),
PosFrame_PersMess = summary(
data_friedman_wide[Condition == "PositiveFrame"]$UsefulPersMess
),
NegFrame_PastBehav = summary(
data_friedman_wide[Condition == "NegativeFrame"]$UsefulPastBehav
),
NegFrame_PersTrait = summary(
data_friedman_wide[Condition == "NegativeFrame"]$UsefulPersTrait
),
NegFrame_PersMess = summary(
data_friedman_wide[Condition == "NegativeFrame"]$UsefulPersMess
)
)
class(x)
#descriptive stats
rbind(
PosFrame_PastBehav = summary(
data_friedman_wide[Condition == "PositiveFrame"]$UsefulPastBehav
),
PosFrame_PersTrait = summary(
data_friedman_wide[Condition == "PositiveFrame"]$UsefulPersTrait
),
PosFrame_PersMess = summary(
data_friedman_wide[Condition == "PositiveFrame"]$UsefulPersMess
),
NegFrame_PastBehav = summary(
data_friedman_wide[Condition == "NegativeFrame"]$UsefulPastBehav
),
NegFrame_PersTrait = summary(
data_friedman_wide[Condition == "NegativeFrame"]$UsefulPersTrait
),
NegFrame_PersMess = summary(
data_friedman_wide[Condition == "NegativeFrame"]$UsefulPersMess
)
)
wilcox.test(
data_friedman_wide[Condition == "PositiveFrame"]$UsefulPastBehav,
data_friedman_wide[Condition == "NegativeFrame"]$UsefulPastBehav,
paired = FALSE
)
wilcox.test(
data_friedman_wide[Condition == "PositiveFrame"]$UsefulPersTrait,
data_friedman_wide[Condition == "NegativeFrame"]$UsefulPersTrait,
paired = FALSE
)
wilcox.test(
data_friedman_wide[Condition == "PositiveFrame"]$UsefulPersMess,
data_friedman_wide[Condition == "NegativeFrame"]$UsefulPersMess,
paired = FALSE
)
data_friedman_wide[Condition == "PositiveFrame"]
data_friedman_wide[Condition == "NegativeFrame"]
#descriptive stats and tests
rbind(
PosFrame_PastBehav = summary(
data_friedman_wide[Condition == "PositiveFrame"]$UsefulPastBehav
),
PosFrame_PersTrait = summary(
data_friedman_wide[Condition == "PositiveFrame"]$UsefulPersTrait
),
PosFrame_PersMess = summary(
data_friedman_wide[Condition == "PositiveFrame"]$UsefulPersMess
),
NegFrame_PastBehav = summary(
data_friedman_wide[Condition == "NegativeFrame"]$UsefulPastBehav
),
NegFrame_PersTrait = summary(
data_friedman_wide[Condition == "NegativeFrame"]$UsefulPersTrait
),
NegFrame_PersMess = summary(
data_friedman_wide[Condition == "NegativeFrame"]$UsefulPersMess
)
)
pkgs <- c(
"tidyverse",
"data.table",
"qgraph",
"effsize"
)
lapply(pkgs, library, character.only = TRUE)
pkgs <- c(
"tidyverse",
"data.table",
"qgraph",
"rstatix"
)
lapply(pkgs, library, character.only = TRUE)
#friedman and posthoc
ResFriedman <- friedman.test(
y = data_friedman_long$value,
groups = data_friedman_long$variable,
blocks = data_friedman_long$id
)
PosthocFriedman
#descriptive stats and tests
rbind(
PosFrame_PastBehav = summary(
data_friedman_wide[Condition == "PositiveFrame"]$UsefulPastBehav
),
PosFrame_PersTrait = summary(
data_friedman_wide[Condition == "PositiveFrame"]$UsefulPersTrait
),
PosFrame_PersMess = summary(
data_friedman_wide[Condition == "PositiveFrame"]$UsefulPersMess
),
NegFrame_PastBehav = summary(
data_friedman_wide[Condition == "NegativeFrame"]$UsefulPastBehav
),
NegFrame_PersTrait = summary(
data_friedman_wide[Condition == "NegativeFrame"]$UsefulPersTrait
),
NegFrame_PersMess = summary(
data_friedman_wide[Condition == "NegativeFrame"]$UsefulPersMess
)
)
#descriptive stats and tests
SummaryFriedman <- rbind(
PosFrame_PastBehav = summary(
data_friedman_wide[Condition == "PositiveFrame"]$UsefulPastBehav
),
PosFrame_PersTrait = summary(
data_friedman_wide[Condition == "PositiveFrame"]$UsefulPersTrait
),
PosFrame_PersMess = summary(
data_friedman_wide[Condition == "PositiveFrame"]$UsefulPersMess
),
NegFrame_PastBehav = summary(
data_friedman_wide[Condition == "NegativeFrame"]$UsefulPastBehav
),
NegFrame_PersTrait = summary(
data_friedman_wide[Condition == "NegativeFrame"]$UsefulPersTrait
),
NegFrame_PersMess = summary(
data_friedman_wide[Condition == "NegativeFrame"]$UsefulPersMess
)
)
#friedman and posthoc
ResFriedman <- friedman.test(
y = data_friedman_long$value,
groups = data_friedman_long$variable,
blocks = data_friedman_long$id
)
PosthocFriedman <- rstatix::wilcox_test(
data = data_friedman_long,
formula = value ~ variable,
p.adjust.method = "bonferroni",
paired = TRUE
)
